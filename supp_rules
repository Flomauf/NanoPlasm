# Isolate potential plasmids sequences
rule get_plasmids:
    message: "Getting plasmids sequences: {wildcards.sample}"
    input:
        assembly="assembly/{sample}/medaka/consensus.fasta",
        info="assembly/{sample}/assembly_info.txt"
    output:
        "assembly/{sample}/plasmids.fasta"
    script: "bin/get_plasmids.py"

# Mob typer
rule mob_typer:
    message: "Mob typer: {wildcards.sample}"
    input: "assembly/{sample}/plasmids.fasta"
    output: "mob_typer/{sample}_mobtyping.tsv"
    threads: 2
    params:
        options = config["mobtyper"]["options"]
    shell: "mob_typer -i {input} -o {output} -n {threads} --multi {params.options}"

# AMR finder
rule amr_finder:
    message: "AMR finder: {wildcards.sample}"
    input: "assembly/{sample}/plasmids.fasta"
    output: "amrfinder/{sample}_AMR.txt"
    threads: 4
    params:
        min_cov = config["amrfinder"]["min_cov"],
        trans_table = config["amrfinder"]["trans_table"],
        species = lambda wildcards: get_species(wildcards.sample, "amrfinder")
    run:
        if {params.species} == "Other":
            shell("amrfinder -n {input} -o {output} -c {params.min_cov} -t {params.trans_table} -q")
        elif {params.species} == "Escherichia_coli":
            shell("amrfinder -n {input} -o {output} -c {params.min_cov} -t {params.trans_table} -q -O Escherichia")
        else:
            shell("amrfinder -n {input} -o {output} -c {params.min_cov} -t {params.trans_table} -q -O {params.species}")

# Gather typing results
rule gather_typing_results:
    message: "Gathering typing results"
    input:
        mob = expand("mob_typer/{sample}_mobtyping.tsv", sample=config["samples"]),
        amr = expand("amrfinder/{sample}_AMR.txt", sample=config["samples"])
    output: "typing.txt"
    script: "bin/gather_typing_results.py"